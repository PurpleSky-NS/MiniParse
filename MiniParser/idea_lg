#这是注释
#参数的获取
(a,b)					#获取前两个参数，参数不足会报错
(a,b,c)					#获取前三个
()						#无参数
#无固定参数数量			#该变量必须放在最后一个，且只能有一个
(a[])					#生成一个a的静态数组
(a,b[])					#把第一个参数给a，b获取剩下的参数
#固定数量参数
(a[8],b[9])				#a获取8个参数，b获取9个参数
(a[2],b[])				#a获取2个参数，b获取剩下的参数
(a,b[a])				#a获取第一个参数，b获取a个参数，注意，a必须是一个整数且必须在b之前
(a[2],b[a[0]+a[1]])		#后面的参数可以访问前面的参数

#变量，不是强类型
#所有变量都是double类型
f1=1
f2=1.6
f1=f2					#f1的值被更新
f1[]=[2]				#f1变成数组类型

#数组 数组全是动态数组
arr[]=[1,2.2]			#长度为2，不可以访问arr[2]
arr[6]=[1,6]			#长度为6，只初始化前两个元素，其他元素默认为0
arr[]=[1,52,36.2]		#长度为3
arr[]=[]				#一个空数组
arr[5]=[]				#不论是否要初始化数值都应该写后面的[]
arr[1]=[1,2,3]			#不严谨，但是最后容量还是按3算
arr[]=[,,6]               #长度为3，参数可以不写，按0算
arr[8]=[,,]               #长度为8,结果与arr[8]=[]相同
#函数原型					| 语法糖
arr.Add(1.5)				| arr+=1.5				#在末尾添加一个数值
arr.Add(1.5,0)				| arr+=1.5[0]			#在位置为0的地方(开头)加一个数值
arr.RemoveLast()			| arr-=[]				#删除末尾
arr.Remove(2)				| arr-=[2]				#删除下标为2的元素
arr.Remove(2,3)				| arr-=[2]+3			#删除下标2开始的3个元素
arr.RemoveRangeIf(2.5)		| arr-=2.5+				#删除所有的2.5
arr.RemoveIf(2.5)			| arr-=2.5				#删除第一个2.5

arr[0]=1											#访问
arr.Contains(2.5)			| arr?=2.5				#查找，可以用在if中
size=arr.Size()				| size=$arr				#数组的大小
pos=arr.IndexOf(2.5)		| pos=arr?[]=2.5		#查找2.5的下标，返回<0代表没有
(value:arr)											#遍历数组
	自己的语句块

#运算符
b=a+1
b=a-1
b=a*1
b=a/1
b=a%1
b=a!
b=a^3
b=(a+2)*3

#语法糖
b+=1
b-=1
b*=1
b/=1
b%=1
b^=2.5

#逻辑运算符
=
~=
>
<
>=
<=
&
|

#类似a>b，a>b&c<d|p>q，1-2<gub*8!之类的表达式成为条件表达式，下文用fexp表示
#判断 if(fexp)
if(fexp)
 语句块
 
#循环
while(fexp)
while[i=0][j=n](fexp)  #定义局部变量
 语句块
while[i=0](12)    #12次循环
 语句块

#返回结果
@a
@a*2-2

#函数库
#应支持自定义的程序(函数库)
#以后慢慢更新内置的

#eg.
#平均数
(a...)
sum=0
(v:a)
 sum+=v
@sum/$a